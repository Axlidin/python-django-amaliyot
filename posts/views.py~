from django.contrib import messages
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse
from django.shortcuts import redirect
from django.views import View
from posts.forms import AddPostForm
from .models import Post, Reviews, PostVisit
from .forms import PostReviewForm
from hitcount.models import HitCount
from hitcount.views import HitCountDetailView
from django.shortcuts import render
from django.utils import timezone
from datetime import timedelta
from django.db.models import Sum, Q, Count


def get_weekly_popular_posts():
    one_week_ago = timezone.now() - timedelta(days=7)
    return Post.objects.filter(status='published').annotate(
        views=Count('visit_logs', filter=Q(visit_logs__timestamp__gte=one_week_ago))
    ).order_by('-views')[:5]  # Eng ko‘p 5 tasi

def get_monthly_popular_posts():
    one_month_ago = timezone.now() - timedelta(days=30)
    return Post.objects.filter(status='published').annotate(
        views=Count('visit_logs', filter=Q(visit_logs__timestamp__gte=one_month_ago))
    ).order_by('-views')[:5]
class HomeView(View):
    def get(self, request):
        latest_posts = Post.objects.filter(status='published').order_by('-created_at')[:5]
        weekly_posts = get_weekly_popular_posts()
        monthly_posts = get_monthly_popular_posts()
        context = {
            'posts': latest_posts,
            'weekly_posts': weekly_posts,
            'monthly_posts': monthly_posts
        }

        return render(request, 'landing_page.html', context)


class AddPostView(View):
    def get(self, request):
        post_form = AddPostForm()
        context = {
            'post_form': post_form,
        }
        return render(request, 'posts/add_post.html', context)

    def post(self, request):
        post_form = AddPostForm(request.POST, request.FILES)

        if post_form.is_valid():
            post = post_form.save(commit=False)
            post.author = request.user
            post.status = 'Draft'
            post.save()
            return redirect('posts:post_list')

        return render(request, 'posts/add_post.html', {'post_form': post_form})  # Xatolik bo‘lsa, formani qaytarish

class PostListView(View):
    def get(self, request):
        posts = Post.objects.filter(status='published').order_by('-created_at')
        return render(request, 'posts/post_list.html', {'posts': posts})



class PostDetailView(HitCountDetailView):
    model = Post  # Modelni aniqlash
    template_name = 'posts/post_detail.html'  # Template nomini aniqlash, agar kerak bo'lsa

    def get(self, request, id):
        post = self.get_object()
        review_form = PostReviewForm()
        reviews = post.izohlar.all().order_by('-created_at')
        hit_count = HitCount.objects.get_for_object(post)
        hit_count_response = self.hit_count(request, hit_count)
        hit_count.refresh_from_db()
        # weekly_popular_posts = self.get_weekly_popular_posts()
        # monthly_popular_posts = self.get_monthly_popular_posts()
        PostVisit.objects.create(post=post)
        # Contextga eng ommabop postlarni qo‘shish
        context = {
            'post': post,
            'review_form': review_form,
            'reviews': reviews,
            # 'weekly_popular_posts': weekly_popular_posts,
            # 'monthly_popular_posts': monthly_popular_posts,
            'hitcount': hit_count,
            'hitcount_response': hit_count_response,
        }

        return render(request, self.template_name, context)

    def get_object(self):
        return Post.objects.get(id=self.kwargs.get('id'))  # Postni olish




# class PostDetailView(HitCountDetailView, View):
#     def get(self, request, id):
#         post = Post.objects.get(id=id)
#         hit_count = get_hitcount_model().objects.get_for_object(post)
#
#         # Sanash jarayoni
#         hit_count_response = self.hit_count(request, hit_count)
#
#         # ❗ Yangilangan hit_count obyekti qayta o'qiladi
#         hit_count.refresh_from_db()
#
#         review_form = PostReviewForm()
#         reviews = post.izohlar.all().order_by('-created_at')
#
#         context = {
#             'post': post,
#             'review_form': review_form,
#             'reviews': reviews,
#             'hitcount': hit_count,
#             'hitcount_response': hit_count_response,
#         }
#         return render(request, 'posts/post_detail.html', context)

class AddPostReviewView(View):
    def post(self, request, id):
        post = Post.objects.get(id=id)
        reviews = post.izohlar.all().order_by('-created_at')
        review_form = PostReviewForm(data=request.POST)
        if review_form.is_valid():
            Reviews.objects.create(
                post=post,
                user=request.user,
                review_text=review_form.cleaned_data['review_text'],
            )
            return redirect(reverse("posts:detail", kwargs={'id': post.id}))
        context = {
            'post': post,
            'review_form': review_form,
            'reviews': reviews,
        }
        return render(request, 'posts/post_detail.html', context)

class EditReviewView(LoginRequiredMixin, View):
    def get(self, request, post_id, review_id):
        post = Post.objects.get(id=post_id)
        revirew = post.izohlar.get(id=review_id)
        review_form =PostReviewForm(instance=revirew)
        context = {
                    'post': post,
                    'review': revirew,
                    'review_form': review_form,
                    }
        return render(request, 'posts/edit_review.html', context)

    def post(self, request, post_id, review_id):
        post = Post.objects.get(id=post_id)
        revirew = post.izohlar.get(id=review_id)
        review_form = PostReviewForm(instance=revirew, data=request.POST)
        if review_form.is_valid():
            revirew.review_text = review_form.cleaned_data['review_text']
            revirew.save()
            return redirect(reverse("posts:detail", kwargs={'id': post.id}))
        context = {
            'post': post,
            'review': revirew,
            'review_form': review_form,
        }
        return render(request, 'posts/edit_review.html', context)

class ConfirmDeleteReviewView(LoginRequiredMixin, View):
    def get(self, request, post_id, review_id):
        post = Post.objects.get(id=post_id)
        revirew = post.izohlar.get(id=review_id)
        context = {
            'post': post,
            'review': revirew,
        }
        return render(request, 'posts/confirm_delete.html', context)

class DeleteReviewView(LoginRequiredMixin, View):
    def get(self, request, post_id, review_id):
        post = Post.objects.get(id=post_id)
        revirew = post.izohlar.get(id=review_id)
        revirew.delete()
        messages.success(request, "You have successfully deleted this review")
        return redirect(reverse("posts:detail", kwargs={'id': post.id}))